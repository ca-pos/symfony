{% extends 'base.html.twig'%}


{% block body %}
{{ page }}<br>
    <ol>
        <li>création d'un formulaire</li>
            <ul class="niv2">
                <li>
                <span class="tt">
                    php bin/console make:form &ensp; [nom_du_formulaireType]    
                </span>
                </li>
                <li>si nécessaire, modifier le constructeur de formulaire dans&nbsp;: 
                <span class="tt">
                    nom_du_formulaireType.php    
                </span>
                </li>
                <li>puis le configurer en ajoutant</li>
                    <ol class="niv3">
                        <li>
                            argument 2&nbsp;: la classe du champ (p.ex. <span class="tt">TextType::class</span>)
                        </li>
                        <li>
                            argument 3&nbsp;: un tableau d'options (label, attributs, etc.)
                            <ul>
                                <li class="text-muted">
                                    voir 
                                        <a href="index.php?p=inserer-getconfiguration-dans-une-classe">
                                            ici
                                        </a> 
                                        pour la création d'une classe permettant l'intégration d'une méthode 
                                        <span class="tt">getConfiguration()</span> qui simplifie le processus de configuration
                                </li>
                            </ul>    
                        </li>
                    </ol>
                <li>
                    rappel : pour appliquer le style bootsrap, ajouter le <span class="tt">form_theme</span> dans le fichier <span class="tt">config/packages/twig.yaml</span> (voir <a href="index?p=mise-en-place-du-projet">ici</a>)
                </li>
            </ul>
        </li>
        <li>si le formulaire comporte un champ password,
            <ul class="niv2">
                <li>injection de dépendance dans les arguments de la fonction correspondante (p.ex. register) pour obtenir l'encodeur&nbsp;:
                <ul>
                    <li><span class="tt"> public function register( ..., UserPasswordEncoderInterface $encoder);</span>
                    </li>
                </ul>
                </li>
                <li>utiliser l'encodeur pour encoder le mot de passe</li>
                    <ul>
                        <code class="html p-0 m-0">                   
                            <li class="p-0 m-0">		
                                <pre class="tt">
$hash = $encoder->encodePassword($user,  $user->getHash() );	// le 1er argument permet de savoir quel
								// algorithme utilisé défini dans security.yaml
                                    </pre>
                            </li>
                        </code>
                    </ul>
            </ul>
        </li>
        <li>
            si le formulaire a été soumis et s'il est correct, l'enregistrer le formulaire dans la base de données
            <ul class="niv2">
                <li>le bouton de soumission réaffiche la même page mais avec la requête en POST ce qui indique que le formulaire a été soumis</li>
                <li>récupération de la requête (dans la fonction create du contrôleur dans l'exemple ci-dessous)</li>
                <li>
                    pour mettre en place la validation, voir 
                    <a href="index.php?p=validation-de-formulaire">
                        ici
                    </a>
                </li>
                <li>utilisation du manager fourni grâce à  l'injection de dépendance pour sauvegarder le formulaire (persist puis flush)</li>
            </ul>
        </li>
        <li>prévenir l'utilisateur du résultat de l'opération</li>
            <ul class="niv2">
                <li>message flash dans la fonction appropriée du contrôleur</li>
                <li>traitement des flash dans <span class="tt"> base.html.twig</span> (ou dans un fichier inclus, p.ex. <span class="tt"> partials/header.html.twig</span>)</li>
                <li>on utilise la variable <span class="tt"> app.flashes</span></li>
                <ul>
                    <li class="text-muted">
                        voir la documentation de symfony <a href="https://symfony.com/blog/new-in-symfony-3-3-improved-flash-messages">ici</a>
                    </li>
                </ul>
            </ul>
        <li>
            exemple d'une fonction du contrôleur impliquant un formulaire
            <ul class="niv2">
               <li>l'exemple vient du blog_cuisine, il s'agit du formulaire permettant de créer une nouvelle recette (Recipe), </li>
                <code class="html p-0 m-0">                   
                    <li class="p-0 m-0">		
                        <pre>
    public function create(Request $request, EntityManagerInterface $manager {
           	$recipe = new Recipe();
    	$form = $this->createForm(RecipeType::class, $recipe);
    	// récupérer les éléments de la requête, notamment le POST
    	$form->handleRequest($request);
    	if( $form->isSubmitted() && $form->isValid()) {
    		$manager->persist($recipe);
    		$manager->flush();
    		// avant d'afficher la nouvelle recette, on prévient l'utilisateur que celle-ci a été prise en compte
    		// à l'aide d'un message flash
    		$this->addFlash(
    			'success',
    			"Merci pour votre contribution. La recette a bien été prise en compte."
    		);
    		// une fois la recette enregistrée, on l'affiche grace à la route recipes_show 
    		// ici avec le paramètre slug de la recette
    		return $this->redirectToRoute('recipes_show', ['slug'=>$recipe->getSlug()]);
    	}
    	return $this->render('recipe/new.html.twig',['form' => $form->createView()]);
    }
                        </pre>
                    </li>
                </code>
                <li class="text-muted">
                    à la première visite de cette page, le formulaire n'a pas encore été soumis, le bloc du <span class="tt">if</span> est donc sauté et on affiche <span class="tt">recipe/new.html.twig</span>&nbsp;; les visites suivantes se font depuis le bouton de soumission du formulaire et le contenu des champs de celui-ci est retourné par la méthode POST&nbsp;; le bloc <span class="tt">if</span> est effectué et on est redirigé vers la route <span class="tt">recipes_show</span> avec le slug correspondant  la recette qui vient d'être soumise ce qui permet de l'afficher.
                </li>
            </ul>
        </li>
    </ol>

{% endblock %}